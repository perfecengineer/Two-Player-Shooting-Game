
LCD_Drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00002f9c  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000261c  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0e  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000641a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000655a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000066ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008313  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000091fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a399  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ab67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <main>
      7a:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e1       	ldi	r26, 0x1D	; 29
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e1       	ldi	r24, 0x1D	; 29
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
#include "BIT_MATH.h"
#include"gpio_privte.h"

/*** Implementation of function, use to determine the pin mode***/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDircetonType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	if(!((port_num > 3) || (pin_num > 7)))
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <GPIO_setupPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <GPIO_setupPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
	{
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <GPIO_setupPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <GPIO_setupPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <GPIO_setupPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		{
			case PORTA_ID:
				if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA_ID_REG,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRA_ID_REG,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <GPIO_setupPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <GPIO_setupPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTB_ID:
				if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0xee>
				{
					SET_BIT(DDRB_ID_REG,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRB_ID_REG,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTC_ID:
				if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x146>
				{
					SET_BIT(DDRC_ID_REG,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRC_ID_REG,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				break;
			case PORTD_ID:
				if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x19e>
				{
					SET_BIT(DDRD_ID_REG,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
				}
				else
				{
					CLEAR_BIT(DDRD_ID_REG,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:
/*** Implementation of function, use to write the pin value***/
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
	if(!((port_num > 3) || (pin_num > 7)))
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_writePin+0x1c>
     d26:	d5 c0       	rjmp	.+426    	; 0xed2 <GPIO_writePin+0x1c6>
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	88 30       	cpi	r24, 0x08	; 8
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GPIO_writePin+0x24>
     d2e:	d1 c0       	rjmp	.+418    	; 0xed2 <GPIO_writePin+0x1c6>
	{
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_writePin+0x3a>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <GPIO_writePin+0xc0>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <GPIO_writePin+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <GPIO_writePin+0x68>
     d58:	bc c0       	rjmp	.+376    	; 0xed2 <GPIO_writePin+0x1c6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <GPIO_writePin+0x5a>
     d64:	5f c0       	rjmp	.+190    	; 0xe24 <GPIO_writePin+0x118>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_writePin+0x66>
     d70:	85 c0       	rjmp	.+266    	; 0xe7c <GPIO_writePin+0x170>
     d72:	af c0       	rjmp	.+350    	; 0xed2 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA_ID_REG,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_writePin+0x8c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_writePin+0x88>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	98 c0       	rjmp	.+304    	; 0xed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA_ID_REG,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_writePin+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_writePin+0xb0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB_ID_REG,pin_num);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_writePin+0xe4>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_writePin+0xe0>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB_ID_REG,pin_num);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_writePin+0x10c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_writePin+0x108>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	57 c0       	rjmp	.+174    	; 0xed2 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC_ID_REG,pin_num);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0x13c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0x138>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	40 c0       	rjmp	.+128    	; 0xed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC_ID_REG,pin_num);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_writePin+0x164>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_writePin+0x160>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	2b c0       	rjmp	.+86     	; 0xed2 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD_ID_REG,pin_num);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0x194>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0x190>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD_ID_REG,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x1bc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x1b8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <GPIO_readPin>:
/*** Implementation of function, use to read the pin value***/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <GPIO_readPin+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_readPin+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = 0;
     ef4:	19 82       	std	Y+1, r1	; 0x01
	if(!((port_num > 3) || (pin_num > 7)))
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	08 f0       	brcs	.+2      	; 0xefe <GPIO_readPin+0x1c>
     efc:	6b c0       	rjmp	.+214    	; 0xfd4 <GPIO_readPin+0xf2>
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	88 30       	cpi	r24, 0x08	; 8
     f02:	08 f0       	brcs	.+2      	; 0xf06 <GPIO_readPin+0x24>
     f04:	67 c0       	rjmp	.+206    	; 0xfd4 <GPIO_readPin+0xf2>
	{
		switch(port_num)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	51 05       	cpc	r21, r1
     f18:	41 f1       	breq	.+80     	; 0xf6a <GPIO_readPin+0x88>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	34 f4       	brge	.+12     	; 0xf30 <GPIO_readPin+0x4e>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	61 f0       	breq	.+24     	; 0xf46 <GPIO_readPin+0x64>
     f2e:	52 c0       	rjmp	.+164    	; 0xfd4 <GPIO_readPin+0xf2>
     f30:	4c 81       	ldd	r20, Y+4	; 0x04
     f32:	5d 81       	ldd	r21, Y+5	; 0x05
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	51 05       	cpc	r21, r1
     f38:	51 f1       	breq	.+84     	; 0xf8e <GPIO_readPin+0xac>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	b9 f1       	breq	.+110    	; 0xfb2 <GPIO_readPin+0xd0>
     f44:	47 c0       	rjmp	.+142    	; 0xfd4 <GPIO_readPin+0xf2>
		{
			case PORTA_ID:
						value = READ_BIT(PINA_ID_REG,pin_num);
     f46:	e9 e3       	ldi	r30, 0x39	; 57
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_readPin+0x7c>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_readPin+0x78>
     f62:	ca 01       	movw	r24, r20
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	35 c0       	rjmp	.+106    	; 0xfd4 <GPIO_readPin+0xf2>
				break;
			case PORTB_ID:
				value = READ_BIT(PINB_ID_REG,pin_num);
     f6a:	e6 e3       	ldi	r30, 0x36	; 54
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a9 01       	movw	r20, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_readPin+0xa0>
     f7e:	55 95       	asr	r21
     f80:	47 95       	ror	r20
     f82:	8a 95       	dec	r24
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_readPin+0x9c>
     f86:	ca 01       	movw	r24, r20
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	23 c0       	rjmp	.+70     	; 0xfd4 <GPIO_readPin+0xf2>
				break;
			case PORTC_ID:
				value = READ_BIT(PINC_ID_REG,pin_num);
     f8e:	e3 e3       	ldi	r30, 0x33	; 51
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a9 01       	movw	r20, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <GPIO_readPin+0xc4>
     fa2:	55 95       	asr	r21
     fa4:	47 95       	ror	r20
     fa6:	8a 95       	dec	r24
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <GPIO_readPin+0xc0>
     faa:	ca 01       	movw	r24, r20
     fac:	81 70       	andi	r24, 0x01	; 1
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	11 c0       	rjmp	.+34     	; 0xfd4 <GPIO_readPin+0xf2>
				break;
			case PORTD_ID:
				value = READ_BIT(PIND_ID_REG,pin_num);
     fb2:	e0 e3       	ldi	r30, 0x30	; 48
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a9 01       	movw	r20, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_readPin+0xe8>
     fc6:	55 95       	asr	r21
     fc8:	47 95       	ror	r20
     fca:	8a 95       	dec	r24
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_readPin+0xe4>
     fce:	ca 01       	movw	r24, r20
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <GPIO_setupPortDirection>:
/*** Implementation of function, use to determine the port mode***/
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDircetonType direction)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <GPIO_setupPortDirection+0x6>
     fec:	00 d0       	rcall	.+0      	; 0xfee <GPIO_setupPortDirection+0x8>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	6a 83       	std	Y+2, r22	; 0x02
	if(!(port_num > 3))
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	08 f0       	brcs	.+2      	; 0xffe <GPIO_setupPortDirection+0x18>
     ffc:	4e c0       	rjmp	.+156    	; 0x109a <GPIO_setupPortDirection+0xb4>
	{
		switch(port_num)
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	3c 83       	std	Y+4, r19	; 0x04
    1006:	2b 83       	std	Y+3, r18	; 0x03
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	91 05       	cpc	r25, r1
    1010:	09 f1       	breq	.+66     	; 0x1054 <GPIO_setupPortDirection+0x6e>
    1012:	2b 81       	ldd	r18, Y+3	; 0x03
    1014:	3c 81       	ldd	r19, Y+4	; 0x04
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	2c f4       	brge	.+10     	; 0x1026 <GPIO_setupPortDirection+0x40>
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	61 f0       	breq	.+24     	; 0x103c <GPIO_setupPortDirection+0x56>
    1024:	3a c0       	rjmp	.+116    	; 0x109a <GPIO_setupPortDirection+0xb4>
    1026:	2b 81       	ldd	r18, Y+3	; 0x03
    1028:	3c 81       	ldd	r19, Y+4	; 0x04
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	f1 f0       	breq	.+60     	; 0x106c <GPIO_setupPortDirection+0x86>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	83 30       	cpi	r24, 0x03	; 3
    1036:	91 05       	cpc	r25, r1
    1038:	29 f1       	breq	.+74     	; 0x1084 <GPIO_setupPortDirection+0x9e>
    103a:	2f c0       	rjmp	.+94     	; 0x109a <GPIO_setupPortDirection+0xb4>
		{
			case PORTA_ID:
				if(direction == PORT_OUTPUT)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	8f 3f       	cpi	r24, 0xFF	; 255
    1040:	29 f4       	brne	.+10     	; 0x104c <GPIO_setupPortDirection+0x66>
				{
					DDRA_ID_REG = 0XFF;
    1042:	ea e3       	ldi	r30, 0x3A	; 58
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	80 83       	st	Z, r24
    104a:	27 c0       	rjmp	.+78     	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRA_ID_REG = 0;
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	10 82       	st	Z, r1
    1052:	23 c0       	rjmp	.+70     	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				break;
			case PORTB_ID:
				if(direction == PORT_OUTPUT)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	8f 3f       	cpi	r24, 0xFF	; 255
    1058:	29 f4       	brne	.+10     	; 0x1064 <GPIO_setupPortDirection+0x7e>
				{
					DDRB_ID_REG = 0XFF;
    105a:	e7 e3       	ldi	r30, 0x37	; 55
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	80 83       	st	Z, r24
    1062:	1b c0       	rjmp	.+54     	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRB_ID_REG = 0;
    1064:	e7 e3       	ldi	r30, 0x37	; 55
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	10 82       	st	Z, r1
    106a:	17 c0       	rjmp	.+46     	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				break;

			case PORTC_ID:
				if(direction == PORT_OUTPUT)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	29 f4       	brne	.+10     	; 0x107c <GPIO_setupPortDirection+0x96>
				{
					DDRC_ID_REG = 0XFF;
    1072:	e4 e3       	ldi	r30, 0x34	; 52
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	80 83       	st	Z, r24
    107a:	0f c0       	rjmp	.+30     	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRC_ID_REG = 0;
    107c:	e4 e3       	ldi	r30, 0x34	; 52
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	10 82       	st	Z, r1
    1082:	0b c0       	rjmp	.+22     	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				break;
			case PORTD_ID:
				if(direction == PORT_OUTPUT)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	8f 3f       	cpi	r24, 0xFF	; 255
    1088:	29 f4       	brne	.+10     	; 0x1094 <GPIO_setupPortDirection+0xae>
				{
					DDRD_ID_REG = 0XFF;
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	80 83       	st	Z, r24
    1092:	03 c0       	rjmp	.+6      	; 0x109a <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRD_ID_REG = 0;
    1094:	e1 e3       	ldi	r30, 0x31	; 49
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	10 82       	st	Z, r1
				}
				break;

		}
	}
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <GPIO_writePort>:
/*** Implementation of function, use to write the port value***/
void GPIO_writePort(uint8 port_num,uint8 value)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <GPIO_writePort+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <GPIO_writePort+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	6a 83       	std	Y+2, r22	; 0x02
	if(!(port_num > 3))
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	90 f5       	brcc	.+100    	; 0x1122 <GPIO_writePort+0x7a>
	{
		switch(port_num)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	d1 f0       	breq	.+52     	; 0x1106 <GPIO_writePort+0x5e>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <GPIO_writePort+0x3e>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <GPIO_writePort+0x54>
    10e4:	1e c0       	rjmp	.+60     	; 0x1122 <GPIO_writePort+0x7a>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <GPIO_writePort+0x68>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	81 f0       	breq	.+32     	; 0x111a <GPIO_writePort+0x72>
    10fa:	13 c0       	rjmp	.+38     	; 0x1122 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA_ID_REG = value;
    10fc:	eb e3       	ldi	r30, 0x3B	; 59
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB_ID_REG = value;
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <GPIO_writePort+0x7a>
				break;

			case PORTC_ID:
				PORTC_ID_REG = value;
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD_ID_REG = value;
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
				break;

		}
	}
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <GPIO_readPort>:
/*** Implementation of function, use to read the port value***/
uint8 GPIO_readPort(uint8 port_num)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <GPIO_readPort+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <GPIO_readPort+0x8>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    113e:	19 82       	std	Y+1, r1	; 0x01
	if(!(port_num > 3))
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	84 30       	cpi	r24, 0x04	; 4
    1144:	90 f5       	brcc	.+100    	; 0x11aa <GPIO_readPort+0x7a>
	{
		switch(port_num)
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3c 83       	std	Y+4, r19	; 0x04
    114e:	2b 83       	std	Y+3, r18	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	d1 f0       	breq	.+52     	; 0x118e <GPIO_readPort+0x5e>
    115a:	2b 81       	ldd	r18, Y+3	; 0x03
    115c:	3c 81       	ldd	r19, Y+4	; 0x04
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <GPIO_readPort+0x3e>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	61 f0       	breq	.+24     	; 0x1184 <GPIO_readPort+0x54>
    116c:	1e c0       	rjmp	.+60     	; 0x11aa <GPIO_readPort+0x7a>
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	3c 81       	ldd	r19, Y+4	; 0x04
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <GPIO_readPort+0x68>
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	81 f0       	breq	.+32     	; 0x11a2 <GPIO_readPort+0x72>
    1182:	13 c0       	rjmp	.+38     	; 0x11aa <GPIO_readPort+0x7a>
		{
			case PORTA_ID:
				value = PINA_ID_REG;
    1184:	e9 e3       	ldi	r30, 0x39	; 57
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <GPIO_readPort+0x7a>
				break;
			case PORTB_ID:
				value = PINB_ID_REG;
    118e:	e6 e3       	ldi	r30, 0x36	; 54
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <GPIO_readPort+0x7a>
				break;
			case PORTC_ID:
				value = PINC_ID_REG;
    1198:	e3 e3       	ldi	r30, 0x33	; 51
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <GPIO_readPort+0x7a>
				break;
			case PORTD_ID:
				value = PIND_ID_REG;
    11a2:	e0 e3       	ldi	r30, 0x30	; 48
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <LCD_init>:
#include<util/delay.h>

#include "BIT_MATH.h"
#include "STD_TYPES.h"
void LCD_init(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	aa 97       	sbiw	r28, 0x2a	; 42
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN,PIN_OUTPUT);
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	64 e0       	ldi	r22, 0x04	; 4
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT_ID,LCD_EN_PIN,PIN_OUTPUT);
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
#if LCD_DATA_MODE == 8
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	6f ef       	ldi	r22, 0xFF	; 255
    11e6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <GPIO_setupPortDirection>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 ea       	ldi	r26, 0xA0	; 160
    11f0:	b1 e4       	ldi	r27, 0x41	; 65
    11f2:	8f a3       	std	Y+39, r24	; 0x27
    11f4:	98 a7       	std	Y+40, r25	; 0x28
    11f6:	a9 a7       	std	Y+41, r26	; 0x29
    11f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	6f a1       	ldd	r22, Y+39	; 0x27
    11fc:	78 a5       	ldd	r23, Y+40	; 0x28
    11fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1200:	9a a5       	ldd	r25, Y+42	; 0x2a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a ef       	ldi	r20, 0xFA	; 250
    1208:	54 e4       	ldi	r21, 0x44	; 68
    120a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8b a3       	std	Y+35, r24	; 0x23
    1214:	9c a3       	std	Y+36, r25	; 0x24
    1216:	ad a3       	std	Y+37, r26	; 0x25
    1218:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    121a:	6b a1       	ldd	r22, Y+35	; 0x23
    121c:	7c a1       	ldd	r23, Y+36	; 0x24
    121e:	8d a1       	ldd	r24, Y+37	; 0x25
    1220:	9e a1       	ldd	r25, Y+38	; 0x26
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <LCD_init+0x82>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9a a3       	std	Y+34, r25	; 0x22
    1238:	89 a3       	std	Y+33, r24	; 0x21
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <LCD_init+0x100>
	else if (__tmp > 65535)
    123c:	6b a1       	ldd	r22, Y+35	; 0x23
    123e:	7c a1       	ldd	r23, Y+36	; 0x24
    1240:	8d a1       	ldd	r24, Y+37	; 0x25
    1242:	9e a1       	ldd	r25, Y+38	; 0x26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	6f a1       	ldd	r22, Y+39	; 0x27
    1256:	78 a5       	ldd	r23, Y+40	; 0x28
    1258:	89 a5       	ldd	r24, Y+41	; 0x29
    125a:	9a a5       	ldd	r25, Y+42	; 0x2a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9a a3       	std	Y+34, r25	; 0x22
    127a:	89 a3       	std	Y+33, r24	; 0x21
    127c:	0f c0       	rjmp	.+30     	; 0x129c <LCD_init+0xe2>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	98 a3       	std	Y+32, r25	; 0x20
    1284:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1286:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1288:	98 a1       	ldd	r25, Y+32	; 0x20
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_init+0xd0>
    128e:	98 a3       	std	Y+32, r25	; 0x20
    1290:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	89 a1       	ldd	r24, Y+33	; 0x21
    1294:	9a a1       	ldd	r25, Y+34	; 0x22
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	89 a1       	ldd	r24, Y+33	; 0x21
    129e:	9a a1       	ldd	r25, Y+34	; 0x22
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <LCD_init+0xc4>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6b a1       	ldd	r22, Y+35	; 0x23
    12a8:	7c a1       	ldd	r23, Y+36	; 0x24
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9a a3       	std	Y+34, r25	; 0x22
    12b8:	89 a3       	std	Y+33, r24	; 0x21
    12ba:	89 a1       	ldd	r24, Y+33	; 0x21
    12bc:	9a a1       	ldd	r25, Y+34	; 0x22
    12be:	9e 8f       	std	Y+30, r25	; 0x1e
    12c0:	8d 8f       	std	Y+29, r24	; 0x1d
    12c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <LCD_init+0x10c>
    12ca:	9e 8f       	std	Y+30, r25	; 0x1e
    12cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	// 8 bits mode
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    12ce:	88 e3       	ldi	r24, 0x38	; 56
    12d0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_sendCommand>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e8       	ldi	r26, 0x80	; 128
    12da:	bf e3       	ldi	r27, 0x3F	; 63
    12dc:	89 8f       	std	Y+25, r24	; 0x19
    12de:	9a 8f       	std	Y+26, r25	; 0x1a
    12e0:	ab 8f       	std	Y+27, r26	; 0x1b
    12e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	69 8d       	ldd	r22, Y+25	; 0x19
    12e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a ef       	ldi	r20, 0xFA	; 250
    12f2:	54 e4       	ldi	r21, 0x44	; 68
    12f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8d 8b       	std	Y+21, r24	; 0x15
    12fe:	9e 8b       	std	Y+22, r25	; 0x16
    1300:	af 8b       	std	Y+23, r26	; 0x17
    1302:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1304:	6d 89       	ldd	r22, Y+21	; 0x15
    1306:	7e 89       	ldd	r23, Y+22	; 0x16
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <LCD_init+0x16c>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <LCD_init+0x1ea>
	else if (__tmp > 65535)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <LCD_init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	69 8d       	ldd	r22, Y+25	; 0x19
    1340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9c 8b       	std	Y+20, r25	; 0x14
    1364:	8b 8b       	std	Y+19, r24	; 0x13
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <LCD_init+0x1cc>
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9a 8b       	std	Y+18, r25	; 0x12
    136e:	89 8b       	std	Y+17, r24	; 0x11
    1370:	89 89       	ldd	r24, Y+17	; 0x11
    1372:	9a 89       	ldd	r25, Y+18	; 0x12
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_init+0x1ba>
    1378:	9a 8b       	std	Y+18, r25	; 0x12
    137a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	8b 89       	ldd	r24, Y+19	; 0x13
    137e:	9c 89       	ldd	r25, Y+20	; 0x14
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9c 8b       	std	Y+20, r25	; 0x14
    1384:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <LCD_init+0x1ae>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <LCD_init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
    13a4:	8b 89       	ldd	r24, Y+19	; 0x13
    13a6:	9c 89       	ldd	r25, Y+20	; 0x14
    13a8:	98 8b       	std	Y+16, r25	; 0x10
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	98 89       	ldd	r25, Y+16	; 0x10
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <LCD_init+0x1f6>
    13b4:	98 8b       	std	Y+16, r25	; 0x10
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
	// 4 bits mode
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	_delay_ms(1);
	//disable cursor
	LCD_sendCommand(LCD_CURSOR_OFF);
    13b8:	8c e0       	ldi	r24, 0x0C	; 12
    13ba:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_sendCommand>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e8       	ldi	r26, 0x80	; 128
    13c4:	bf e3       	ldi	r27, 0x3F	; 63
    13c6:	8b 87       	std	Y+11, r24	; 0x0b
    13c8:	9c 87       	std	Y+12, r25	; 0x0c
    13ca:	ad 87       	std	Y+13, r26	; 0x0d
    13cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	4a ef       	ldi	r20, 0xFA	; 250
    13dc:	54 e4       	ldi	r21, 0x44	; 68
    13de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	8f 83       	std	Y+7, r24	; 0x07
    13e8:	98 87       	std	Y+8, r25	; 0x08
    13ea:	a9 87       	std	Y+9, r26	; 0x09
    13ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	2c f4       	brge	.+10     	; 0x1410 <LCD_init+0x256>
		__ticks = 1;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	3f c0       	rjmp	.+126    	; 0x148e <LCD_init+0x2d4>
	else if (__tmp > 65535)
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	78 85       	ldd	r23, Y+8	; 0x08
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	3f ef       	ldi	r19, 0xFF	; 255
    141c:	4f e7       	ldi	r20, 0x7F	; 127
    141e:	57 e4       	ldi	r21, 0x47	; 71
    1420:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1424:	18 16       	cp	r1, r24
    1426:	4c f5       	brge	.+82     	; 0x147a <LCD_init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1428:	6b 85       	ldd	r22, Y+11	; 0x0b
    142a:	7c 85       	ldd	r23, Y+12	; 0x0c
    142c:	8d 85       	ldd	r24, Y+13	; 0x0d
    142e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <LCD_init+0x2b6>
    1452:	88 ec       	ldi	r24, 0xC8	; 200
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <LCD_init+0x2a4>
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	69 f7       	brne	.-38     	; 0x1452 <LCD_init+0x298>
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <LCD_init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_init+0x2e0>
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	// clear lcd
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_sendCommand>

}
    14a8:	aa 96       	adiw	r28, 0x2a	; 42
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <LCD_sendCommand>:
void LCD_sendCommand(uint8 com)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	e9 97       	sbiw	r28, 0x39	; 57
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN,LOGIC_LOW);
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e8       	ldi	r26, 0x80	; 128
    14e0:	bf e3       	ldi	r27, 0x3F	; 63
    14e2:	8d ab       	std	Y+53, r24	; 0x35
    14e4:	9e ab       	std	Y+54, r25	; 0x36
    14e6:	af ab       	std	Y+55, r26	; 0x37
    14e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	6d a9       	ldd	r22, Y+53	; 0x35
    14ec:	7e a9       	ldd	r23, Y+54	; 0x36
    14ee:	8f a9       	ldd	r24, Y+55	; 0x37
    14f0:	98 ad       	ldd	r25, Y+56	; 0x38
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a ef       	ldi	r20, 0xFA	; 250
    14f8:	54 e4       	ldi	r21, 0x44	; 68
    14fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	89 ab       	std	Y+49, r24	; 0x31
    1504:	9a ab       	std	Y+50, r25	; 0x32
    1506:	ab ab       	std	Y+51, r26	; 0x33
    1508:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    150a:	69 a9       	ldd	r22, Y+49	; 0x31
    150c:	7a a9       	ldd	r23, Y+50	; 0x32
    150e:	8b a9       	ldd	r24, Y+51	; 0x33
    1510:	9c a9       	ldd	r25, Y+52	; 0x34
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <LCD_sendCommand+0x72>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	98 ab       	std	Y+48, r25	; 0x30
    1528:	8f a7       	std	Y+47, r24	; 0x2f
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    152c:	69 a9       	ldd	r22, Y+49	; 0x31
    152e:	7a a9       	ldd	r23, Y+50	; 0x32
    1530:	8b a9       	ldd	r24, Y+51	; 0x33
    1532:	9c a9       	ldd	r25, Y+52	; 0x34
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	6d a9       	ldd	r22, Y+53	; 0x35
    1546:	7e a9       	ldd	r23, Y+54	; 0x36
    1548:	8f a9       	ldd	r24, Y+55	; 0x37
    154a:	98 ad       	ldd	r25, Y+56	; 0x38
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	98 ab       	std	Y+48, r25	; 0x30
    156a:	8f a7       	std	Y+47, r24	; 0x2f
    156c:	0f c0       	rjmp	.+30     	; 0x158c <LCD_sendCommand+0xd2>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9e a7       	std	Y+46, r25	; 0x2e
    1574:	8d a7       	std	Y+45, r24	; 0x2d
    1576:	8d a5       	ldd	r24, Y+45	; 0x2d
    1578:	9e a5       	ldd	r25, Y+46	; 0x2e
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_sendCommand+0xc0>
    157e:	9e a7       	std	Y+46, r25	; 0x2e
    1580:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	98 ab       	std	Y+48, r25	; 0x30
    158a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	8f a5       	ldd	r24, Y+47	; 0x2f
    158e:	98 a9       	ldd	r25, Y+48	; 0x30
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <LCD_sendCommand+0xb4>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	69 a9       	ldd	r22, Y+49	; 0x31
    1598:	7a a9       	ldd	r23, Y+50	; 0x32
    159a:	8b a9       	ldd	r24, Y+51	; 0x33
    159c:	9c a9       	ldd	r25, Y+52	; 0x34
    159e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
    15aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ac:	98 a9       	ldd	r25, Y+48	; 0x30
    15ae:	9c a7       	std	Y+44, r25	; 0x2c
    15b0:	8b a7       	std	Y+43, r24	; 0x2b
    15b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_sendCommand+0xfc>
    15ba:	9c a7       	std	Y+44, r25	; 0x2c
    15bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_HIGH);
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 e8       	ldi	r26, 0x80	; 128
    15ce:	bf e3       	ldi	r27, 0x3F	; 63
    15d0:	8f a3       	std	Y+39, r24	; 0x27
    15d2:	98 a7       	std	Y+40, r25	; 0x28
    15d4:	a9 a7       	std	Y+41, r26	; 0x29
    15d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	6f a1       	ldd	r22, Y+39	; 0x27
    15da:	78 a5       	ldd	r23, Y+40	; 0x28
    15dc:	89 a5       	ldd	r24, Y+41	; 0x29
    15de:	9a a5       	ldd	r25, Y+42	; 0x2a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a ef       	ldi	r20, 0xFA	; 250
    15e6:	54 e4       	ldi	r21, 0x44	; 68
    15e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8b a3       	std	Y+35, r24	; 0x23
    15f2:	9c a3       	std	Y+36, r25	; 0x24
    15f4:	ad a3       	std	Y+37, r26	; 0x25
    15f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15f8:	6b a1       	ldd	r22, Y+35	; 0x23
    15fa:	7c a1       	ldd	r23, Y+36	; 0x24
    15fc:	8d a1       	ldd	r24, Y+37	; 0x25
    15fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <LCD_sendCommand+0x160>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9a a3       	std	Y+34, r25	; 0x22
    1616:	89 a3       	std	Y+33, r24	; 0x21
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    161a:	6b a1       	ldd	r22, Y+35	; 0x23
    161c:	7c a1       	ldd	r23, Y+36	; 0x24
    161e:	8d a1       	ldd	r24, Y+37	; 0x25
    1620:	9e a1       	ldd	r25, Y+38	; 0x26
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	6f a1       	ldd	r22, Y+39	; 0x27
    1634:	78 a5       	ldd	r23, Y+40	; 0x28
    1636:	89 a5       	ldd	r24, Y+41	; 0x29
    1638:	9a a5       	ldd	r25, Y+42	; 0x2a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9a a3       	std	Y+34, r25	; 0x22
    1658:	89 a3       	std	Y+33, r24	; 0x21
    165a:	0f c0       	rjmp	.+30     	; 0x167a <LCD_sendCommand+0x1c0>
    165c:	88 ec       	ldi	r24, 0xC8	; 200
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	98 a3       	std	Y+32, r25	; 0x20
    1662:	8f 8f       	std	Y+31, r24	; 0x1f
    1664:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1666:	98 a1       	ldd	r25, Y+32	; 0x20
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_sendCommand+0x1ae>
    166c:	98 a3       	std	Y+32, r25	; 0x20
    166e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	89 a1       	ldd	r24, Y+33	; 0x21
    1672:	9a a1       	ldd	r25, Y+34	; 0x22
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9a a3       	std	Y+34, r25	; 0x22
    1678:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	89 a1       	ldd	r24, Y+33	; 0x21
    167c:	9a a1       	ldd	r25, Y+34	; 0x22
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <LCD_sendCommand+0x1a2>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6b a1       	ldd	r22, Y+35	; 0x23
    1686:	7c a1       	ldd	r23, Y+36	; 0x24
    1688:	8d a1       	ldd	r24, Y+37	; 0x25
    168a:	9e a1       	ldd	r25, Y+38	; 0x26
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
    1698:	89 a1       	ldd	r24, Y+33	; 0x21
    169a:	9a a1       	ldd	r25, Y+34	; 0x22
    169c:	9e 8f       	std	Y+30, r25	; 0x1e
    169e:	8d 8f       	std	Y+29, r24	; 0x1d
    16a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_sendCommand+0x1ea>
    16a8:	9e 8f       	std	Y+30, r25	; 0x1e
    16aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if LCD_DATA_MODE == 8
	GPIO_writePort(LCD_DATA_PORT_ID,com);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	69 ad       	ldd	r22, Y+57	; 0x39
    16b0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <GPIO_writePort>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e8       	ldi	r26, 0x80	; 128
    16ba:	bf e3       	ldi	r27, 0x3F	; 63
    16bc:	89 8f       	std	Y+25, r24	; 0x19
    16be:	9a 8f       	std	Y+26, r25	; 0x1a
    16c0:	ab 8f       	std	Y+27, r26	; 0x1b
    16c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c4:	69 8d       	ldd	r22, Y+25	; 0x19
    16c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a ef       	ldi	r20, 0xFA	; 250
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8d 8b       	std	Y+21, r24	; 0x15
    16de:	9e 8b       	std	Y+22, r25	; 0x16
    16e0:	af 8b       	std	Y+23, r26	; 0x17
    16e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16e4:	6d 89       	ldd	r22, Y+21	; 0x15
    16e6:	7e 89       	ldd	r23, Y+22	; 0x16
    16e8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ea:	98 8d       	ldd	r25, Y+24	; 0x18
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	2c f4       	brge	.+10     	; 0x1706 <LCD_sendCommand+0x24c>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c 8b       	std	Y+20, r25	; 0x14
    1702:	8b 8b       	std	Y+19, r24	; 0x13
    1704:	3f c0       	rjmp	.+126    	; 0x1784 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	57 e4       	ldi	r21, 0x47	; 71
    1716:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	4c f5       	brge	.+82     	; 0x1770 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	69 8d       	ldd	r22, Y+25	; 0x19
    1720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <LCD_sendCommand+0x2ac>
    1748:	88 ec       	ldi	r24, 0xC8	; 200
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9a 8b       	std	Y+18, r25	; 0x12
    174e:	89 8b       	std	Y+17, r24	; 0x11
    1750:	89 89       	ldd	r24, Y+17	; 0x11
    1752:	9a 89       	ldd	r25, Y+18	; 0x12
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_sendCommand+0x29a>
    1758:	9a 8b       	std	Y+18, r25	; 0x12
    175a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	8b 89       	ldd	r24, Y+19	; 0x13
    175e:	9c 89       	ldd	r25, Y+20	; 0x14
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	9c 8b       	std	Y+20, r25	; 0x14
    1764:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	8b 89       	ldd	r24, Y+19	; 0x13
    1768:	9c 89       	ldd	r25, Y+20	; 0x14
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f7       	brne	.-38     	; 0x1748 <LCD_sendCommand+0x28e>
    176e:	14 c0       	rjmp	.+40     	; 0x1798 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9c 8b       	std	Y+20, r25	; 0x14
    1782:	8b 8b       	std	Y+19, r24	; 0x13
    1784:	8b 89       	ldd	r24, Y+19	; 0x13
    1786:	9c 89       	ldd	r25, Y+20	; 0x14
    1788:	98 8b       	std	Y+16, r25	; 0x10
    178a:	8f 87       	std	Y+15, r24	; 0x0f
    178c:	8f 85       	ldd	r24, Y+15	; 0x0f
    178e:	98 89       	ldd	r25, Y+16	; 0x10
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_sendCommand+0x2d6>
    1794:	98 8b       	std	Y+16, r25	; 0x10
    1796:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
    1798:	83 e0       	ldi	r24, 0x03	; 3
    179a:	65 e0       	ldi	r22, 0x05	; 5
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e8       	ldi	r26, 0x80	; 128
    17a8:	bf e3       	ldi	r27, 0x3F	; 63
    17aa:	8b 87       	std	Y+11, r24	; 0x0b
    17ac:	9c 87       	std	Y+12, r25	; 0x0c
    17ae:	ad 87       	std	Y+13, r26	; 0x0d
    17b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a ef       	ldi	r20, 0xFA	; 250
    17c0:	54 e4       	ldi	r21, 0x44	; 68
    17c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8f 83       	std	Y+7, r24	; 0x07
    17cc:	98 87       	std	Y+8, r25	; 0x08
    17ce:	a9 87       	std	Y+9, r26	; 0x09
    17d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	3f c0       	rjmp	.+126    	; 0x1872 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    17f4:	6f 81       	ldd	r22, Y+7	; 0x07
    17f6:	78 85       	ldd	r23, Y+8	; 0x08
    17f8:	89 85       	ldd	r24, Y+9	; 0x09
    17fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	4c f5       	brge	.+82     	; 0x185e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180c:	6b 85       	ldd	r22, Y+11	; 0x0b
    180e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1810:	8d 85       	ldd	r24, Y+13	; 0x0d
    1812:	9e 85       	ldd	r25, Y+14	; 0x0e
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <LCD_sendCommand+0x39a>
    1836:	88 ec       	ldi	r24, 0xC8	; 200
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9c 83       	std	Y+4, r25	; 0x04
    183c:	8b 83       	std	Y+3, r24	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_sendCommand+0x388>
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f7       	brne	.-38     	; 0x1836 <LCD_sendCommand+0x37c>
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185e:	6f 81       	ldd	r22, Y+7	; 0x07
    1860:	78 85       	ldd	r23, Y+8	; 0x08
    1862:	89 85       	ldd	r24, Y+9	; 0x09
    1864:	9a 85       	ldd	r25, Y+10	; 0x0a
    1866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	9a 81       	ldd	r25, Y+2	; 0x02
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_sendCommand+0x3c4>
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN7_ID,READ_BIT(com,3));
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1886:	e9 96       	adiw	r28, 0x39	; 57
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	e9 97       	sbiw	r28, 0x39	; 57
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN,LOGIC_HIGH);
    18ae:	83 e0       	ldi	r24, 0x03	; 3
    18b0:	64 e0       	ldi	r22, 0x04	; 4
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e8       	ldi	r26, 0x80	; 128
    18be:	bf e3       	ldi	r27, 0x3F	; 63
    18c0:	8d ab       	std	Y+53, r24	; 0x35
    18c2:	9e ab       	std	Y+54, r25	; 0x36
    18c4:	af ab       	std	Y+55, r26	; 0x37
    18c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6d a9       	ldd	r22, Y+53	; 0x35
    18ca:	7e a9       	ldd	r23, Y+54	; 0x36
    18cc:	8f a9       	ldd	r24, Y+55	; 0x37
    18ce:	98 ad       	ldd	r25, Y+56	; 0x38
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	89 ab       	std	Y+49, r24	; 0x31
    18e2:	9a ab       	std	Y+50, r25	; 0x32
    18e4:	ab ab       	std	Y+51, r26	; 0x33
    18e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18e8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ea:	7a a9       	ldd	r23, Y+50	; 0x32
    18ec:	8b a9       	ldd	r24, Y+51	; 0x33
    18ee:	9c a9       	ldd	r25, Y+52	; 0x34
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	98 ab       	std	Y+48, r25	; 0x30
    1906:	8f a7       	std	Y+47, r24	; 0x2f
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    190a:	69 a9       	ldd	r22, Y+49	; 0x31
    190c:	7a a9       	ldd	r23, Y+50	; 0x32
    190e:	8b a9       	ldd	r24, Y+51	; 0x33
    1910:	9c a9       	ldd	r25, Y+52	; 0x34
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6d a9       	ldd	r22, Y+53	; 0x35
    1924:	7e a9       	ldd	r23, Y+54	; 0x36
    1926:	8f a9       	ldd	r24, Y+55	; 0x37
    1928:	98 ad       	ldd	r25, Y+56	; 0x38
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	98 ab       	std	Y+48, r25	; 0x30
    1948:	8f a7       	std	Y+47, r24	; 0x2f
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_displayCharacter+0xd2>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9e a7       	std	Y+46, r25	; 0x2e
    1952:	8d a7       	std	Y+45, r24	; 0x2d
    1954:	8d a5       	ldd	r24, Y+45	; 0x2d
    1956:	9e a5       	ldd	r25, Y+46	; 0x2e
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_displayCharacter+0xc0>
    195c:	9e a7       	std	Y+46, r25	; 0x2e
    195e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8f a5       	ldd	r24, Y+47	; 0x2f
    1962:	98 a9       	ldd	r25, Y+48	; 0x30
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	98 ab       	std	Y+48, r25	; 0x30
    1968:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8f a5       	ldd	r24, Y+47	; 0x2f
    196c:	98 a9       	ldd	r25, Y+48	; 0x30
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_displayCharacter+0xb4>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	69 a9       	ldd	r22, Y+49	; 0x31
    1976:	7a a9       	ldd	r23, Y+50	; 0x32
    1978:	8b a9       	ldd	r24, Y+51	; 0x33
    197a:	9c a9       	ldd	r25, Y+52	; 0x34
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	98 ab       	std	Y+48, r25	; 0x30
    1986:	8f a7       	std	Y+47, r24	; 0x2f
    1988:	8f a5       	ldd	r24, Y+47	; 0x2f
    198a:	98 a9       	ldd	r25, Y+48	; 0x30
    198c:	9c a7       	std	Y+44, r25	; 0x2c
    198e:	8b a7       	std	Y+43, r24	; 0x2b
    1990:	8b a5       	ldd	r24, Y+43	; 0x2b
    1992:	9c a5       	ldd	r25, Y+44	; 0x2c
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_displayCharacter+0xfc>
    1998:	9c a7       	std	Y+44, r25	; 0x2c
    199a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_HIGH);
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e8       	ldi	r26, 0x80	; 128
    19ac:	bf e3       	ldi	r27, 0x3F	; 63
    19ae:	8f a3       	std	Y+39, r24	; 0x27
    19b0:	98 a7       	std	Y+40, r25	; 0x28
    19b2:	a9 a7       	std	Y+41, r26	; 0x29
    19b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	6f a1       	ldd	r22, Y+39	; 0x27
    19b8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ba:	89 a5       	ldd	r24, Y+41	; 0x29
    19bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a ef       	ldi	r20, 0xFA	; 250
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8b a3       	std	Y+35, r24	; 0x23
    19d0:	9c a3       	std	Y+36, r25	; 0x24
    19d2:	ad a3       	std	Y+37, r26	; 0x25
    19d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19d6:	6b a1       	ldd	r22, Y+35	; 0x23
    19d8:	7c a1       	ldd	r23, Y+36	; 0x24
    19da:	8d a1       	ldd	r24, Y+37	; 0x25
    19dc:	9e a1       	ldd	r25, Y+38	; 0x26
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9a a3       	std	Y+34, r25	; 0x22
    19f4:	89 a3       	std	Y+33, r24	; 0x21
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    19f8:	6b a1       	ldd	r22, Y+35	; 0x23
    19fa:	7c a1       	ldd	r23, Y+36	; 0x24
    19fc:	8d a1       	ldd	r24, Y+37	; 0x25
    19fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	4c f5       	brge	.+82     	; 0x1a62 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	6f a1       	ldd	r22, Y+39	; 0x27
    1a12:	78 a5       	ldd	r23, Y+40	; 0x28
    1a14:	89 a5       	ldd	r24, Y+41	; 0x29
    1a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e2       	ldi	r20, 0x20	; 32
    1a1e:	51 e4       	ldi	r21, 0x41	; 65
    1a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9a a3       	std	Y+34, r25	; 0x22
    1a36:	89 a3       	std	Y+33, r24	; 0x21
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <LCD_displayCharacter+0x1c0>
    1a3a:	88 ec       	ldi	r24, 0xC8	; 200
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	98 a3       	std	Y+32, r25	; 0x20
    1a40:	8f 8f       	std	Y+31, r24	; 0x1f
    1a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a44:	98 a1       	ldd	r25, Y+32	; 0x20
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_displayCharacter+0x1ae>
    1a4a:	98 a3       	std	Y+32, r25	; 0x20
    1a4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a50:	9a a1       	ldd	r25, Y+34	; 0x22
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9a a3       	std	Y+34, r25	; 0x22
    1a56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <LCD_displayCharacter+0x1a2>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	89 a1       	ldd	r24, Y+33	; 0x21
    1a78:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_displayCharacter+0x1ea>
    1a86:	9e 8f       	std	Y+30, r25	; 0x1e
    1a88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if LCD_DATA_MODE == 8
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	69 ad       	ldd	r22, Y+57	; 0x39
    1a8e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <GPIO_writePort>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e8       	ldi	r26, 0x80	; 128
    1a98:	bf e3       	ldi	r27, 0x3F	; 63
    1a9a:	89 8f       	std	Y+25, r24	; 0x19
    1a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a ef       	ldi	r20, 0xFA	; 250
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8d 8b       	std	Y+21, r24	; 0x15
    1abc:	9e 8b       	std	Y+22, r25	; 0x16
    1abe:	af 8b       	std	Y+23, r26	; 0x17
    1ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 8d       	ldd	r25, Y+24	; 0x18
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	69 8d       	ldd	r22, Y+25	; 0x19
    1afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <LCD_displayCharacter+0x2ac>
    1b26:	88 ec       	ldi	r24, 0xC8	; 200
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
    1b2e:	89 89       	ldd	r24, Y+17	; 0x11
    1b30:	9a 89       	ldd	r25, Y+18	; 0x12
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_displayCharacter+0x29a>
    1b36:	9a 8b       	std	Y+18, r25	; 0x12
    1b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8b 89       	ldd	r24, Y+19	; 0x13
    1b46:	9c 89       	ldd	r25, Y+20	; 0x14
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <LCD_displayCharacter+0x28e>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9c 8b       	std	Y+20, r25	; 0x14
    1b60:	8b 8b       	std	Y+19, r24	; 0x13
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6c:	98 89       	ldd	r25, Y+16	; 0x10
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_displayCharacter+0x2d6>
    1b72:	98 8b       	std	Y+16, r25	; 0x10
    1b74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	65 e0       	ldi	r22, 0x05	; 5
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a0 e8       	ldi	r26, 0x80	; 128
    1b86:	bf e3       	ldi	r27, 0x3F	; 63
    1b88:	8b 87       	std	Y+11, r24	; 0x0b
    1b8a:	9c 87       	std	Y+12, r25	; 0x0c
    1b8c:	ad 87       	std	Y+13, r26	; 0x0d
    1b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a ef       	ldi	r20, 0xFA	; 250
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	98 87       	std	Y+8, r25	; 0x08
    1bac:	a9 87       	std	Y+9, r26	; 0x09
    1bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <LCD_displayCharacter+0x39a>
    1c14:	88 ec       	ldi	r24, 0xC8	; 200
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_displayCharacter+0x388>
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <LCD_displayCharacter+0x37c>
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_displayCharacter+0x3c4>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN7_ID,READ_BIT(data,3));
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN,LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1c64:	e9 96       	adiw	r28, 0x39	; 57
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <LCD_displayString>:
void LCD_displayString(const uint8 *str)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <LCD_displayString+0x6>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	0a c0       	rjmp	.+20     	; 0x1c9a <LCD_displayString+0x24>
	while(*str != '\0')
	{
		LCD_displayCharacter((*str));
    1c86:	e9 81       	ldd	r30, Y+1	; 0x01
    1c88:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8a:	80 81       	ld	r24, Z
    1c8c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
		str++;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
void LCD_displayString(const uint8 *str)
{
	while(*str != '\0')
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	80 81       	ld	r24, Z
    1ca0:	88 23       	and	r24, r24
    1ca2:	89 f7       	brne	.-30     	; 0x1c86 <LCD_displayString+0x10>
	{
		LCD_displayCharacter((*str));
		str++;
	}
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <LCD_moveCursor+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <LCD_moveCursor+0x8>
    1cb6:	0f 92       	push	r0
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
    1cbe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 shift = 0;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3d 83       	std	Y+5, r19	; 0x05
    1cca:	2c 83       	std	Y+4, r18	; 0x04
    1ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cce:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <LCD_moveCursor+0x32>
    1cd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd8:	21 30       	cpi	r18, 0x01	; 1
    1cda:	31 05       	cpc	r19, r1
    1cdc:	21 f0       	breq	.+8      	; 0x1ce6 <LCD_moveCursor+0x38>
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <LCD_moveCursor+0x3e>
	{
#if NUMBER_OF_ROW_OF_LCD == 1
		case 0:shift = 0x00 + col;break;
#elif NUMBER_OF_ROW_OF_LCD == 2
		case 0:shift = 0x00 + col;break;
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <LCD_moveCursor+0x3e>
		case 1:shift = 0x40 + col;break;
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	80 5c       	subi	r24, 0xC0	; 192
    1cea:	89 83       	std	Y+1, r24	; 0x01
		case 1:shift = 0x40 + col;break;
		case 2:shift = 0x10 + col;break;
		case 3:shift = 0x50 + col;break;
#endif
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | shift);
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	80 68       	ori	r24, 0x80	; 128
    1cf0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_sendCommand>
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <LCD_displayStringRowColumn+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <LCD_displayStringRowColumn+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02
    1d14:	5c 83       	std	Y+4, r21	; 0x04
    1d16:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d1c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	LCD_displayString(str);
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <LCD_displayIntgerNumber>:
void LCD_displayIntgerNumber(uint32 num)
{
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	65 97       	sbiw	r28, 0x15	; 21
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	6a 8b       	std	Y+18, r22	; 0x12
    1d50:	7b 8b       	std	Y+19, r23	; 0x13
    1d52:	8c 8b       	std	Y+20, r24	; 0x14
    1d54:	9d 8b       	std	Y+21, r25	; 0x15
	/************* Array to store the digit ************/
	uint8 digit[16] = {0};
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	fe 01       	movw	r30, r28
    1d5a:	32 96       	adiw	r30, 0x02	; 2
    1d5c:	df 01       	movw	r26, r30
    1d5e:	98 2f       	mov	r25, r24
    1d60:	1d 92       	st	X+, r1
    1d62:	9a 95       	dec	r25
    1d64:	e9 f7       	brne	.-6      	; 0x1d60 <LCD_displayIntgerNumber+0x2a>
	/******* counter use for count the number of digits ***/
	sint8 count = 0;
    1d66:	19 82       	std	Y+1, r1	; 0x01
	/**** Special case for zero ******/

	if(num == 0)
    1d68:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6a:	9b 89       	ldd	r25, Y+19	; 0x13
    1d6c:	ac 89       	ldd	r26, Y+20	; 0x14
    1d6e:	bd 89       	ldd	r27, Y+21	; 0x15
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	a1 05       	cpc	r26, r1
    1d74:	b1 05       	cpc	r27, r1
    1d76:	e9 f5       	brne	.+122    	; 0x1df2 <LCD_displayIntgerNumber+0xbc>
	{
		digit[count] = '0';
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	33 27       	eor	r19, r19
    1d7e:	27 fd       	sbrc	r18, 7
    1d80:	30 95       	com	r19
    1d82:	ce 01       	movw	r24, r28
    1d84:	02 96       	adiw	r24, 0x02	; 2
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	80 e3       	ldi	r24, 0x30	; 48
    1d8e:	80 83       	st	Z, r24
    1d90:	49 c0       	rjmp	.+146    	; 0x1e24 <LCD_displayIntgerNumber+0xee>
	else
	{
		/**** This looping use for slicing the input number to digits***/
		while(num != 0)
		{
			digit[count] = (num % 10) + '0';
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	08 2f       	mov	r16, r24
    1d96:	11 27       	eor	r17, r17
    1d98:	07 fd       	sbrc	r16, 7
    1d9a:	10 95       	com	r17
    1d9c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d9e:	9b 89       	ldd	r25, Y+19	; 0x13
    1da0:	ac 89       	ldd	r26, Y+20	; 0x14
    1da2:	bd 89       	ldd	r27, Y+21	; 0x15
    1da4:	2a e0       	ldi	r18, 0x0A	; 10
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	28 2f       	mov	r18, r24
    1dba:	20 5d       	subi	r18, 0xD0	; 208
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	02 96       	adiw	r24, 0x02	; 2
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e0 0f       	add	r30, r16
    1dc4:	f1 1f       	adc	r31, r17
    1dc6:	20 83       	st	Z, r18
			num /= 10;
    1dc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1dca:	9b 89       	ldd	r25, Y+19	; 0x13
    1dcc:	ac 89       	ldd	r26, Y+20	; 0x14
    1dce:	bd 89       	ldd	r27, Y+21	; 0x15
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__udivmodsi4>
    1de0:	da 01       	movw	r26, r20
    1de2:	c9 01       	movw	r24, r18
    1de4:	8a 8b       	std	Y+18, r24	; 0x12
    1de6:	9b 8b       	std	Y+19, r25	; 0x13
    1de8:	ac 8b       	std	Y+20, r26	; 0x14
    1dea:	bd 8b       	std	Y+21, r27	; 0x15
			count++;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	89 83       	std	Y+1, r24	; 0x01
		digit[count] = '0';
	}
	else
	{
		/**** This looping use for slicing the input number to digits***/
		while(num != 0)
    1df2:	8a 89       	ldd	r24, Y+18	; 0x12
    1df4:	9b 89       	ldd	r25, Y+19	; 0x13
    1df6:	ac 89       	ldd	r26, Y+20	; 0x14
    1df8:	bd 89       	ldd	r27, Y+21	; 0x15
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	a1 05       	cpc	r26, r1
    1dfe:	b1 05       	cpc	r27, r1
    1e00:	41 f6       	brne	.-112    	; 0x1d92 <LCD_displayIntgerNumber+0x5c>
    1e02:	10 c0       	rjmp	.+32     	; 0x1e24 <LCD_displayIntgerNumber+0xee>
		}
	}
	/************** This loop using for display on LCD ****/
	while(count >= 0)
	{
		LCD_displayCharacter(digit[count]);
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	33 27       	eor	r19, r19
    1e0a:	27 fd       	sbrc	r18, 7
    1e0c:	30 95       	com	r19
    1e0e:	ce 01       	movw	r24, r28
    1e10:	02 96       	adiw	r24, 0x02	; 2
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	80 81       	ld	r24, Z
    1e1a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
		count--;
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	81 50       	subi	r24, 0x01	; 1
    1e22:	89 83       	std	Y+1, r24	; 0x01
			num /= 10;
			count++;
		}
	}
	/************** This loop using for display on LCD ****/
	while(count >= 0)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	88 23       	and	r24, r24
    1e28:	6c f7       	brge	.-38     	; 0x1e04 <LCD_displayIntgerNumber+0xce>
	{
		LCD_displayCharacter(digit[count]);
		count--;
	}
}
    1e2a:	65 96       	adiw	r28, 0x15	; 21
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_sendCommand>
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <LCD_secpecialCharacter>:
	itoa(data,buff,10);
	LCD_displayString(buff);
}*/

void LCD_secpecialCharacter(uint8 *pattern,uint8 Location_number,uint8 row,uint8 column)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	64 97       	sbiw	r28, 0x14	; 20
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	99 8b       	std	Y+17, r25	; 0x11
    1e6a:	88 8b       	std	Y+16, r24	; 0x10
    1e6c:	6a 8b       	std	Y+18, r22	; 0x12
    1e6e:	4b 8b       	std	Y+19, r20	; 0x13
    1e70:	2c 8b       	std	Y+20, r18	; 0x14

	uint8 counter = 0;
    1e72:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_sendCommand(SET_CURSOR_TO_CGRAM + (Location_number * 8));
    1e74:	8a 89       	ldd	r24, Y+18	; 0x12
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	08 96       	adiw	r24, 0x08	; 8
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_sendCommand>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 ea       	ldi	r26, 0xA0	; 160
    1e92:	b0 e4       	ldi	r27, 0x40	; 64
    1e94:	8b 87       	std	Y+11, r24	; 0x0b
    1e96:	9c 87       	std	Y+12, r25	; 0x0c
    1e98:	ad 87       	std	Y+13, r26	; 0x0d
    1e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8f 83       	std	Y+7, r24	; 0x07
    1eb6:	98 87       	std	Y+8, r25	; 0x08
    1eb8:	a9 87       	std	Y+9, r26	; 0x09
    1eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <LCD_secpecialCharacter+0x8a>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <LCD_secpecialCharacter+0x108>
	else if (__tmp > 65535)
    1ede:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee0:	78 85       	ldd	r23, Y+8	; 0x08
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <LCD_secpecialCharacter+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <LCD_secpecialCharacter+0xea>
    1f20:	88 ec       	ldi	r24, 0xC8	; 200
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_secpecialCharacter+0xd8>
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <LCD_secpecialCharacter+0xcc>
    1f46:	14 c0       	rjmp	.+40     	; 0x1f70 <LCD_secpecialCharacter+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9e 83       	std	Y+6, r25	; 0x06
    1f5a:	8d 83       	std	Y+5, r24	; 0x05
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_secpecialCharacter+0x114>
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	 for(counter = 0; counter < 8; counter ++)
    1f70:	1f 86       	std	Y+15, r1	; 0x0f
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <LCD_secpecialCharacter+0x13c>
	 {
		 LCD_displayCharacter(pattern[counter]);
    1f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	88 89       	ldd	r24, Y+16	; 0x10
    1f7c:	99 89       	ldd	r25, Y+17	; 0x11
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	80 81       	ld	r24, Z
    1f86:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>

	uint8 counter = 0;
	LCD_sendCommand(SET_CURSOR_TO_CGRAM + (Location_number * 8));
	_delay_ms(5);

	 for(counter = 0; counter < 8; counter ++)
    1f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	8f 87       	std	Y+15, r24	; 0x0f
    1f90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f92:	88 30       	cpi	r24, 0x08	; 8
    1f94:	78 f3       	brcs	.-34     	; 0x1f74 <LCD_secpecialCharacter+0x120>
	 {
		 LCD_displayCharacter(pattern[counter]);
	 }
	 LCD_moveCursor(row,column);
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	6c 89       	ldd	r22, Y+20	; 0x14
    1f9a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayCharacter(Location_number);
    1f9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1fa0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
}
    1fa4:	64 96       	adiw	r28, 0x14	; 20
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <main>:
void Display_winer(uint8 *name);
void HAMADA_DIE(void);
void HAMOCKSHA_DIE(void);

uint8 main(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	62 97       	sbiw	r28, 0x12	; 18
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
	sint8 flag = 0;
    1fca:	19 8a       	std	Y+17, r1	; 0x11
	uint8 hamada_score = 0;
    1fcc:	18 8a       	std	Y+16, r1	; 0x10
	uint8 hamocksha_score = 0;
    1fce:	1f 86       	std	Y+15, r1	; 0x0f
	/*** This push for Hamad's gun ***/
	GPIO_setupPinDirection(PORTA_ID,PIN0,PIN_INPUT);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	/*** To active the internal pull up resistor ***/
	GPIO_writePin(PORTA_ID,PIN0,LOGIC_HIGH);
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	/*** This push for Hamoksha's motion ***/
	GPIO_setupPinDirection(PORTD_ID,PIN1,PIN_INPUT);
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	/*** To active the internal pull up resistor ***/
	GPIO_writePin(PORTD_ID,PIN7,LOGIC_HIGH);
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	67 e0       	ldi	r22, 0x07	; 7
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	LCD_init();
    1ff8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_init>
	/**** introduction for game ***/
	Intro_function();
    1ffc:	0e 94 f6 13 	call	0x27ec	; 0x27ec <Intro_function>
	/**** Hamada's Character ***/
	LCD_secpecialCharacter(CharacterOfPerson,0,0,1);
    2000:	87 e2       	ldi	r24, 0x27	; 39
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
	while(1)
	{
		/*** Hamocsha's Character ***/
		LCD_secpecialCharacter(CharacterOfPerson,5,0,10);
    200e:	87 e2       	ldi	r24, 0x27	; 39
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	65 e0       	ldi	r22, 0x05	; 5
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	2a e0       	ldi	r18, 0x0A	; 10
    2018:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
		if(GPIO_readPin(PORTA_ID,PIN0) == 0)
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	0e 94 71 07 	call	0xee2	; 0xee2 <GPIO_readPin>
    2024:	88 23       	and	r24, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <main+0x74>
    2028:	83 c0       	rjmp	.+262    	; 0x2130 <main+0x17a>
		{
			LCD_secpecialCharacter(Hamda_gun,1,0,2);
    202a:	8f e2       	ldi	r24, 0x2F	; 47
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	22 e0       	ldi	r18, 0x02	; 2
    2034:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 ef       	ldi	r26, 0xF0	; 240
    203e:	b1 e4       	ldi	r27, 0x41	; 65
    2040:	8b 87       	std	Y+11, r24	; 0x0b
    2042:	9c 87       	std	Y+12, r25	; 0x0c
    2044:	ad 87       	std	Y+13, r26	; 0x0d
    2046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a ef       	ldi	r20, 0xFA	; 250
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8f 83       	std	Y+7, r24	; 0x07
    2062:	98 87       	std	Y+8, r25	; 0x08
    2064:	a9 87       	std	Y+9, r26	; 0x09
    2066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <main+0xd4>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <main+0x152>
	else if (__tmp > 65535)
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <main+0x134>
    20cc:	88 ec       	ldi	r24, 0xC8	; 200
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <main+0x122>
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <main+0x116>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <main+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <main+0x15e>
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			flag = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	89 8b       	std	Y+17, r24	; 0x11
			start = 4;
    2120:	84 e0       	ldi	r24, 0x04	; 4
    2122:	80 93 25 01 	sts	0x0125, r24
			size = 10;
    2126:	8a e0       	ldi	r24, 0x0A	; 10
    2128:	80 93 26 01 	sts	0x0126, r24
			shoot();
    212c:	0e 94 56 13 	call	0x26ac	; 0x26ac <shoot>

		}
		/*** Hamocsha's Character ***/
		if(GPIO_readPin(PORTD_ID,PIN7) == 0)
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	67 e0       	ldi	r22, 0x07	; 7
    2134:	0e 94 71 07 	call	0xee2	; 0xee2 <GPIO_readPin>
    2138:	88 23       	and	r24, r24
    213a:	81 f5       	brne	.+96     	; 0x219c <main+0x1e6>
		{
			LCD_moveCursor(0,10);
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	6a e0       	ldi	r22, 0x0A	; 10
    2140:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
			LCD_displayCharacter('_');
    2144:	8f e5       	ldi	r24, 0x5F	; 95
    2146:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
			if(flag == 1)
    214a:	89 89       	ldd	r24, Y+17	; 0x11
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	61 f4       	brne	.+24     	; 0x2168 <main+0x1b2>
			{
				start = 11;
    2150:	8b e0       	ldi	r24, 0x0B	; 11
    2152:	80 93 25 01 	sts	0x0125, r24
				size = 14;
    2156:	8e e0       	ldi	r24, 0x0E	; 14
    2158:	80 93 26 01 	sts	0x0126, r24
				shoot();
    215c:	0e 94 56 13 	call	0x26ac	; 0x26ac <shoot>
				/*** Set score **/
				hamocksha_score ++;
    2160:	8f 85       	ldd	r24, Y+15	; 0x0f
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	8f 87       	std	Y+15, r24	; 0x0f
				flag = 0;
    2166:	19 8a       	std	Y+17, r1	; 0x11
			}
			LCD_moveCursor(1,10);
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	6a e0       	ldi	r22, 0x0A	; 10
    216c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
			/*** Display score ***/
			LCD_displayIntgerNumber(hamocksha_score);
    2170:	8f 85       	ldd	r24, Y+15	; 0x0f
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e0       	ldi	r26, 0x00	; 0
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_displayIntgerNumber>
			 if(hamocksha_score == 3)
    2182:	8f 85       	ldd	r24, Y+15	; 0x0f
    2184:	83 30       	cpi	r24, 0x03	; 3
    2186:	09 f0       	breq	.+2      	; 0x218a <main+0x1d4>
    2188:	42 cf       	rjmp	.-380    	; 0x200e <main+0x58>
			 {
				 HAMADA_DIE();
    218a:	0e 94 2e 12 	call	0x245c	; 0x245c <HAMADA_DIE>
				 Display_winer("hamocksha");
    218e:	80 e6       	ldi	r24, 0x60	; 96
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 01 11 	call	0x2202	; 0x2202 <Display_winer>
				 return 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	8a 8b       	std	Y+18, r24	; 0x12
    219a:	29 c0       	rjmp	.+82     	; 0x21ee <main+0x238>
			 }
		}
		else if(flag == 1)
    219c:	89 89       	ldd	r24, Y+17	; 0x11
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <main+0x1ee>
    21a2:	35 cf       	rjmp	.-406    	; 0x200e <main+0x58>
		{
			/*** Set score **/
			 hamada_score ++;
    21a4:	88 89       	ldd	r24, Y+16	; 0x10
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	88 8b       	std	Y+16, r24	; 0x10
			 /*** Display score ***/
			 LCD_moveCursor(1,1);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
			LCD_displayIntgerNumber(hamada_score);
    21b2:	88 89       	ldd	r24, Y+16	; 0x10
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_displayIntgerNumber>
			 flag = 0;
    21c4:	19 8a       	std	Y+17, r1	; 0x11
			 if(hamada_score == 3)
    21c6:	88 89       	ldd	r24, Y+16	; 0x10
    21c8:	83 30       	cpi	r24, 0x03	; 3
    21ca:	09 f0       	breq	.+2      	; 0x21ce <main+0x218>
    21cc:	20 cf       	rjmp	.-448    	; 0x200e <main+0x58>
			 {
				for(flag = 1; flag <= 3; flag ++)
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	89 8b       	std	Y+17, r24	; 0x11
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <main+0x228>
				{
					HAMOCKSHA_DIE();
    21d4:	0e 94 1f 11 	call	0x223e	; 0x223e <HAMOCKSHA_DIE>
			 LCD_moveCursor(1,1);
			LCD_displayIntgerNumber(hamada_score);
			 flag = 0;
			 if(hamada_score == 3)
			 {
				for(flag = 1; flag <= 3; flag ++)
    21d8:	89 89       	ldd	r24, Y+17	; 0x11
    21da:	8f 5f       	subi	r24, 0xFF	; 255
    21dc:	89 8b       	std	Y+17, r24	; 0x11
    21de:	89 89       	ldd	r24, Y+17	; 0x11
    21e0:	84 30       	cpi	r24, 0x04	; 4
    21e2:	c4 f3       	brlt	.-16     	; 0x21d4 <main+0x21e>
				{
					HAMOCKSHA_DIE();
				}
				Display_winer("hamada");
    21e4:	8a e6       	ldi	r24, 0x6A	; 106
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 01 11 	call	0x2202	; 0x2202 <Display_winer>
				return 0;
    21ec:	1a 8a       	std	Y+18, r1	; 0x12
			 }
		}



	}
    21ee:	8a 89       	ldd	r24, Y+18	; 0x12
}
    21f0:	62 96       	adiw	r28, 0x12	; 18
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <Display_winer>:
void Display_winer(uint8 *name)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <Display_winer+0x6>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
	 LCD_clearScreen();
    2210:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
	 LCD_moveCursor(0,2);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	62 e0       	ldi	r22, 0x02	; 2
    2218:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("The winner is :");
    221c:	81 e7       	ldi	r24, 0x71	; 113
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
	 LCD_moveCursor(1,4);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	64 e0       	ldi	r22, 0x04	; 4
    2228:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString(name);
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>


}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <HAMOCKSHA_DIE>:
void HAMOCKSHA_DIE(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	6c 97       	sbiw	r28, 0x1c	; 28
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(0,11);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	6b e0       	ldi	r22, 0x0B	; 11
    2256:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	LCD_displayCharacter(' ');
    225a:	80 e2       	ldi	r24, 0x20	; 32
    225c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
	LCD_secpecialCharacter(CharacterOfPerson,5,0,10);
    2260:	87 e2       	ldi	r24, 0x27	; 39
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	65 e0       	ldi	r22, 0x05	; 5
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	2a e0       	ldi	r18, 0x0A	; 10
    226a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	aa ef       	ldi	r26, 0xFA	; 250
    2274:	b3 e4       	ldi	r27, 0x43	; 67
    2276:	89 8f       	std	Y+25, r24	; 0x19
    2278:	9a 8f       	std	Y+26, r25	; 0x1a
    227a:	ab 8f       	std	Y+27, r26	; 0x1b
    227c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	69 8d       	ldd	r22, Y+25	; 0x19
    2280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8d 8b       	std	Y+21, r24	; 0x15
    2298:	9e 8b       	std	Y+22, r25	; 0x16
    229a:	af 8b       	std	Y+23, r26	; 0x17
    229c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    229e:	6d 89       	ldd	r22, Y+21	; 0x15
    22a0:	7e 89       	ldd	r23, Y+22	; 0x16
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <HAMOCKSHA_DIE+0x82>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	3f c0       	rjmp	.+126    	; 0x233e <HAMOCKSHA_DIE+0x100>
	else if (__tmp > 65535)
    22c0:	6d 89       	ldd	r22, Y+21	; 0x15
    22c2:	7e 89       	ldd	r23, Y+22	; 0x16
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <HAMOCKSHA_DIE+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	69 8d       	ldd	r22, Y+25	; 0x19
    22da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <HAMOCKSHA_DIE+0xe2>
    2302:	88 ec       	ldi	r24, 0xC8	; 200
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9a 8b       	std	Y+18, r25	; 0x12
    2308:	89 8b       	std	Y+17, r24	; 0x11
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	9a 89       	ldd	r25, Y+18	; 0x12
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <HAMOCKSHA_DIE+0xd0>
    2312:	9a 8b       	std	Y+18, r25	; 0x12
    2314:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	9c 89       	ldd	r25, Y+20	; 0x14
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9c 8b       	std	Y+20, r25	; 0x14
    231e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8b 89       	ldd	r24, Y+19	; 0x13
    2322:	9c 89       	ldd	r25, Y+20	; 0x14
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <HAMOCKSHA_DIE+0xc4>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <HAMOCKSHA_DIE+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
    233e:	8b 89       	ldd	r24, Y+19	; 0x13
    2340:	9c 89       	ldd	r25, Y+20	; 0x14
    2342:	98 8b       	std	Y+16, r25	; 0x10
    2344:	8f 87       	std	Y+15, r24	; 0x0f
    2346:	8f 85       	ldd	r24, Y+15	; 0x0f
    2348:	98 89       	ldd	r25, Y+16	; 0x10
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <HAMOCKSHA_DIE+0x10c>
    234e:	98 8b       	std	Y+16, r25	; 0x10
    2350:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_moveCursor(0,10);
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	6a e0       	ldi	r22, 0x0A	; 10
    2356:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	LCD_displayCharacter('_');
    235a:	8f e5       	ldi	r24, 0x5F	; 95
    235c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
	LCD_displayCharacter('_');
    2360:	8f e5       	ldi	r24, 0x5F	; 95
    2362:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	aa ef       	ldi	r26, 0xFA	; 250
    236c:	b3 e4       	ldi	r27, 0x43	; 67
    236e:	8b 87       	std	Y+11, r24	; 0x0b
    2370:	9c 87       	std	Y+12, r25	; 0x0c
    2372:	ad 87       	std	Y+13, r26	; 0x0d
    2374:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a ef       	ldi	r20, 0xFA	; 250
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8f 83       	std	Y+7, r24	; 0x07
    2390:	98 87       	std	Y+8, r25	; 0x08
    2392:	a9 87       	std	Y+9, r26	; 0x09
    2394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2396:	6f 81       	ldd	r22, Y+7	; 0x07
    2398:	78 85       	ldd	r23, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	5f e3       	ldi	r21, 0x3F	; 63
    23a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	2c f4       	brge	.+10     	; 0x23b8 <HAMOCKSHA_DIE+0x17a>
		__ticks = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	3f c0       	rjmp	.+126    	; 0x2436 <HAMOCKSHA_DIE+0x1f8>
	else if (__tmp > 65535)
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	3f ef       	ldi	r19, 0xFF	; 255
    23c4:	4f e7       	ldi	r20, 0x7F	; 127
    23c6:	57 e4       	ldi	r21, 0x47	; 71
    23c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	4c f5       	brge	.+82     	; 0x2422 <HAMOCKSHA_DIE+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	0f c0       	rjmp	.+30     	; 0x2418 <HAMOCKSHA_DIE+0x1da>
    23fa:	88 ec       	ldi	r24, 0xC8	; 200
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <HAMOCKSHA_DIE+0x1c8>
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	69 f7       	brne	.-38     	; 0x23fa <HAMOCKSHA_DIE+0x1bc>
    2420:	14 c0       	rjmp	.+40     	; 0x244a <HAMOCKSHA_DIE+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <HAMOCKSHA_DIE+0x204>
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    244a:	6c 96       	adiw	r28, 0x1c	; 28
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <HAMADA_DIE>:
void HAMADA_DIE(void)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	6d 97       	sbiw	r28, 0x1d	; 29
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
	uint8 count;
	LCD_moveCursor(0,2);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	62 e0       	ldi	r22, 0x02	; 2
    2474:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	LCD_displayCharacter(' ');
    2478:	80 e2       	ldi	r24, 0x20	; 32
    247a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
	for(count= 9; count >= 3; count --)
    247e:	89 e0       	ldi	r24, 0x09	; 9
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
    2482:	8c c0       	rjmp	.+280    	; 0x259c <HAMADA_DIE+0x140>
	{
		LCD_secpecialCharacter(CharacterOfPerson,5,0,count);
    2484:	87 e2       	ldi	r24, 0x27	; 39
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	65 e0       	ldi	r22, 0x05	; 5
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    248e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
		LCD_secpecialCharacter(Hamocksha_gun,6,0,count - 1);
    2492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2494:	28 2f       	mov	r18, r24
    2496:	21 50       	subi	r18, 0x01	; 1
    2498:	87 e3       	ldi	r24, 0x37	; 55
    249a:	91 e0       	ldi	r25, 0x01	; 1
    249c:	66 e0       	ldi	r22, 0x06	; 6
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a8 ec       	ldi	r26, 0xC8	; 200
    24aa:	b2 e4       	ldi	r27, 0x42	; 66
    24ac:	89 8f       	std	Y+25, r24	; 0x19
    24ae:	9a 8f       	std	Y+26, r25	; 0x1a
    24b0:	ab 8f       	std	Y+27, r26	; 0x1b
    24b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	69 8d       	ldd	r22, Y+25	; 0x19
    24b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a ef       	ldi	r20, 0xFA	; 250
    24c2:	54 e4       	ldi	r21, 0x44	; 68
    24c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	8d 8b       	std	Y+21, r24	; 0x15
    24ce:	9e 8b       	std	Y+22, r25	; 0x16
    24d0:	af 8b       	std	Y+23, r26	; 0x17
    24d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <HAMADA_DIE+0x9a>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <HAMADA_DIE+0x118>
	else if (__tmp > 65535)
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <HAMADA_DIE+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	69 8d       	ldd	r22, Y+25	; 0x19
    2510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <HAMADA_DIE+0xfa>
    2538:	88 ec       	ldi	r24, 0xC8	; 200
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
    2540:	89 89       	ldd	r24, Y+17	; 0x11
    2542:	9a 89       	ldd	r25, Y+18	; 0x12
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <HAMADA_DIE+0xe8>
    2548:	9a 8b       	std	Y+18, r25	; 0x12
    254a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8b 89       	ldd	r24, Y+19	; 0x13
    254e:	9c 89       	ldd	r25, Y+20	; 0x14
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <HAMADA_DIE+0xdc>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <HAMADA_DIE+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	6d 89       	ldd	r22, Y+21	; 0x15
    2562:	7e 89       	ldd	r23, Y+22	; 0x16
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	98 8b       	std	Y+16, r25	; 0x10
    257a:	8f 87       	std	Y+15, r24	; 0x0f
    257c:	8f 85       	ldd	r24, Y+15	; 0x0f
    257e:	98 89       	ldd	r25, Y+16	; 0x10
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <HAMADA_DIE+0x124>
    2584:	98 8b       	std	Y+16, r25	; 0x10
    2586:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		LCD_moveCursor(0,count);
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    258c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
		LCD_displayCharacter(' ');
    2590:	80 e2       	ldi	r24, 0x20	; 32
    2592:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
void HAMADA_DIE(void)
{
	uint8 count;
	LCD_moveCursor(0,2);
	LCD_displayCharacter(' ');
	for(count= 9; count >= 3; count --)
    2596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2598:	81 50       	subi	r24, 0x01	; 1
    259a:	8d 8f       	std	Y+29, r24	; 0x1d
    259c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <HAMADA_DIE+0x148>
    25a2:	70 cf       	rjmp	.-288    	; 0x2484 <HAMADA_DIE+0x28>
		_delay_ms(100);
		LCD_moveCursor(0,count);
		LCD_displayCharacter(' ');

	}
	LCD_secpecialCharacter(CharacterOfPerson,5,0,count + 1);
    25a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a6:	28 2f       	mov	r18, r24
    25a8:	2f 5f       	subi	r18, 0xFF	; 255
    25aa:	87 e2       	ldi	r24, 0x27	; 39
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	65 e0       	ldi	r22, 0x05	; 5
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_secpecialCharacter>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	aa e7       	ldi	r26, 0x7A	; 122
    25bc:	b4 e4       	ldi	r27, 0x44	; 68
    25be:	8b 87       	std	Y+11, r24	; 0x0b
    25c0:	9c 87       	std	Y+12, r25	; 0x0c
    25c2:	ad 87       	std	Y+13, r26	; 0x0d
    25c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    25cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a ef       	ldi	r20, 0xFA	; 250
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8f 83       	std	Y+7, r24	; 0x07
    25e0:	98 87       	std	Y+8, r25	; 0x08
    25e2:	a9 87       	std	Y+9, r26	; 0x09
    25e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <HAMADA_DIE+0x1ac>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <HAMADA_DIE+0x22a>
	else if (__tmp > 65535)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <HAMADA_DIE+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <HAMADA_DIE+0x20c>
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	8b 83       	std	Y+3, r24	; 0x03
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <HAMADA_DIE+0x1fa>
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <HAMADA_DIE+0x1ee>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <HAMADA_DIE+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <HAMADA_DIE+0x236>
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    269a:	6d 96       	adiw	r28, 0x1d	; 29
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <shoot>:
void shoot(void)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	2f 97       	sbiw	r28, 0x0f	; 15
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	for(counter = start; counter < size;counter++ )
    26c0:	80 91 25 01 	lds	r24, 0x0125
    26c4:	8f 87       	std	Y+15, r24	; 0x0f
    26c6:	83 c0       	rjmp	.+262    	; 0x27ce <shoot+0x122>
	{

		//if(counter == 10)
			//continue;
		LCD_moveCursor(0,counter);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    26cc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
		LCD_displayCharacter('-');
    26d0:	8d e2       	ldi	r24, 0x2D	; 45
    26d2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a8 ec       	ldi	r26, 0xC8	; 200
    26dc:	b2 e4       	ldi	r27, 0x42	; 66
    26de:	8b 87       	std	Y+11, r24	; 0x0b
    26e0:	9c 87       	std	Y+12, r25	; 0x0c
    26e2:	ad 87       	std	Y+13, r26	; 0x0d
    26e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a ef       	ldi	r20, 0xFA	; 250
    26f4:	54 e4       	ldi	r21, 0x44	; 68
    26f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	98 87       	std	Y+8, r25	; 0x08
    2702:	a9 87       	std	Y+9, r26	; 0x09
    2704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <shoot+0x7c>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <shoot+0xfa>
	else if (__tmp > 65535)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <shoot+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <shoot+0xdc>
    276a:	88 ec       	ldi	r24, 0xC8	; 200
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <shoot+0xca>
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <shoot+0xbe>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <shoot+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <shoot+0x106>
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_moveCursor(0,counter);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    27be:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
		LCD_displayCharacter(' ');
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_displayCharacter>
	_delay_ms(1000);
}
void shoot(void)
{
	uint8 counter;
	for(counter = start; counter < size;counter++ )
    27c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	8f 87       	std	Y+15, r24	; 0x0f
    27ce:	90 91 26 01 	lds	r25, 0x0126
    27d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d4:	89 17       	cp	r24, r25
    27d6:	08 f4       	brcc	.+2      	; 0x27da <shoot+0x12e>
    27d8:	77 cf       	rjmp	.-274    	; 0x26c8 <shoot+0x1c>
		LCD_moveCursor(0,counter);
		LCD_displayCharacter(' ');

	}

}
    27da:	2f 96       	adiw	r28, 0x0f	; 15
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <Intro_function>:
void Intro_function(void)
{
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	c4 55       	subi	r28, 0x54	; 84
    27fa:	d0 40       	sbci	r29, 0x00	; 0
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
	/*** introduction of game ***/
	 LCD_moveCursor(0,0);
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("This match :");
    280e:	81 e8       	ldi	r24, 0x81	; 129
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
	 LCD_moveCursor(1,0);
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("of 3 points:");
    281e:	8e e8       	ldi	r24, 0x8E	; 142
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
    2826:	fe 01       	movw	r30, r28
    2828:	ef 5a       	subi	r30, 0xAF	; 175
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	aa ef       	ldi	r26, 0xFA	; 250
    2832:	b4 e4       	ldi	r27, 0x44	; 68
    2834:	80 83       	st	Z, r24
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	a2 83       	std	Z+2, r26	; 0x02
    283a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	8e 01       	movw	r16, r28
    283e:	03 5b       	subi	r16, 0xB3	; 179
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ef 5a       	subi	r30, 0xAF	; 175
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4a ef       	ldi	r20, 0xFA	; 250
    2856:	54 e4       	ldi	r21, 0x44	; 68
    2858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    286a:	fe 01       	movw	r30, r28
    286c:	e3 5b       	subi	r30, 0xB3	; 179
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	44 f4       	brge	.+16     	; 0x2898 <Intro_function+0xac>
		__ticks = 1;
    2888:	fe 01       	movw	r30, r28
    288a:	e5 5b       	subi	r30, 0xB5	; 181
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	64 c0       	rjmp	.+200    	; 0x2960 <Intro_function+0x174>
	else if (__tmp > 65535)
    2898:	fe 01       	movw	r30, r28
    289a:	e3 5b       	subi	r30, 0xB3	; 179
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	0c f0       	brlt	.+2      	; 0x28b8 <Intro_function+0xcc>
    28b6:	43 c0       	rjmp	.+134    	; 0x293e <Intro_function+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	fe 01       	movw	r30, r28
    28ba:	ef 5a       	subi	r30, 0xAF	; 175
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8e 01       	movw	r16, r28
    28d8:	05 5b       	subi	r16, 0xB5	; 181
    28da:	1f 4f       	sbci	r17, 0xFF	; 255
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	f8 01       	movw	r30, r16
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
    28ee:	1f c0       	rjmp	.+62     	; 0x292e <Intro_function+0x142>
    28f0:	fe 01       	movw	r30, r28
    28f2:	e7 5b       	subi	r30, 0xB7	; 183
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	88 ec       	ldi	r24, 0xC8	; 200
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24
    28fe:	fe 01       	movw	r30, r28
    2900:	e7 5b       	subi	r30, 0xB7	; 183
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <Intro_function+0x11c>
    290c:	fe 01       	movw	r30, r28
    290e:	e7 5b       	subi	r30, 0xB7	; 183
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	de 01       	movw	r26, r28
    2918:	a5 5b       	subi	r26, 0xB5	; 181
    291a:	bf 4f       	sbci	r27, 0xFF	; 255
    291c:	fe 01       	movw	r30, r28
    291e:	e5 5b       	subi	r30, 0xB5	; 181
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	11 96       	adiw	r26, 0x01	; 1
    292a:	9c 93       	st	X, r25
    292c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	fe 01       	movw	r30, r28
    2930:	e5 5b       	subi	r30, 0xB5	; 181
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	d1 f6       	brne	.-76     	; 0x28f0 <Intro_function+0x104>
    293c:	27 c0       	rjmp	.+78     	; 0x298c <Intro_function+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	8e 01       	movw	r16, r28
    2940:	05 5b       	subi	r16, 0xB5	; 181
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	e3 5b       	subi	r30, 0xB3	; 179
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	f8 01       	movw	r30, r16
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
    2960:	de 01       	movw	r26, r28
    2962:	a9 5b       	subi	r26, 0xB9	; 185
    2964:	bf 4f       	sbci	r27, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e5 5b       	subi	r30, 0xB5	; 181
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	8d 93       	st	X+, r24
    2972:	9c 93       	st	X, r25
    2974:	fe 01       	movw	r30, r28
    2976:	e9 5b       	subi	r30, 0xB9	; 185
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <Intro_function+0x192>
    2982:	fe 01       	movw	r30, r28
    2984:	e9 5b       	subi	r30, 0xB9	; 185
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
	 _delay_ms(2000);
	 LCD_clearScreen();
    298c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
	 LCD_moveCursor(0,0);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("between Hamada ");
    2998:	8b e9       	ldi	r24, 0x9B	; 155
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
	 LCD_moveCursor(1,0);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("And Hamocksha: ");
    29a8:	8b ea       	ldi	r24, 0xAB	; 171
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 5b       	subi	r30, 0xBD	; 189
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	aa ef       	ldi	r26, 0xFA	; 250
    29bc:	b4 e4       	ldi	r27, 0x44	; 68
    29be:	80 83       	st	Z, r24
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	a2 83       	std	Z+2, r26	; 0x02
    29c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	8e 01       	movw	r16, r28
    29c8:	01 5c       	subi	r16, 0xC1	; 193
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	fe 01       	movw	r30, r28
    29ce:	ed 5b       	subi	r30, 0xBD	; 189
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a ef       	ldi	r20, 0xFA	; 250
    29e0:	54 e4       	ldi	r21, 0x44	; 68
    29e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	f8 01       	movw	r30, r16
    29ec:	80 83       	st	Z, r24
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f4:	fe 01       	movw	r30, r28
    29f6:	ff 96       	adiw	r30, 0x3f	; 63
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e8       	ldi	r20, 0x80	; 128
    2a06:	5f e3       	ldi	r21, 0x3F	; 63
    2a08:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a0c:	88 23       	and	r24, r24
    2a0e:	2c f4       	brge	.+10     	; 0x2a1a <Intro_function+0x22e>
		__ticks = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9e af       	std	Y+62, r25	; 0x3e
    2a16:	8d af       	std	Y+61, r24	; 0x3d
    2a18:	46 c0       	rjmp	.+140    	; 0x2aa6 <Intro_function+0x2ba>
	else if (__tmp > 65535)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ff 96       	adiw	r30, 0x3f	; 63
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	64 f5       	brge	.+88     	; 0x2a8e <Intro_function+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	fe 01       	movw	r30, r28
    2a38:	ed 5b       	subi	r30, 0xBD	; 189
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e af       	std	Y+62, r25	; 0x3e
    2a62:	8d af       	std	Y+61, r24	; 0x3d
    2a64:	0f c0       	rjmp	.+30     	; 0x2a84 <Intro_function+0x298>
    2a66:	88 ec       	ldi	r24, 0xC8	; 200
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	9c af       	std	Y+60, r25	; 0x3c
    2a6c:	8b af       	std	Y+59, r24	; 0x3b
    2a6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a70:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <Intro_function+0x286>
    2a76:	9c af       	std	Y+60, r25	; 0x3c
    2a78:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	9e af       	std	Y+62, r25	; 0x3e
    2a82:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <Intro_function+0x27a>
    2a8c:	16 c0       	rjmp	.+44     	; 0x2aba <Intro_function+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ff 96       	adiw	r30, 0x3f	; 63
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e af       	std	Y+62, r25	; 0x3e
    2aa4:	8d af       	std	Y+61, r24	; 0x3d
    2aa6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aa8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aaa:	9a af       	std	Y+58, r25	; 0x3a
    2aac:	89 af       	std	Y+57, r24	; 0x39
    2aae:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <Intro_function+0x2c6>
    2ab6:	9a af       	std	Y+58, r25	; 0x3a
    2ab8:	89 af       	std	Y+57, r24	; 0x39
	 _delay_ms(2000);
	 LCD_clearScreen();
    2aba:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
	 LCD_moveCursor(0,1);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("The Winner will :");
    2ac6:	8b eb       	ldi	r24, 0xBB	; 187
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	aa ef       	ldi	r26, 0xFA	; 250
    2ad4:	b4 e4       	ldi	r27, 0x44	; 68
    2ad6:	8d ab       	std	Y+53, r24	; 0x35
    2ad8:	9e ab       	std	Y+54, r25	; 0x36
    2ada:	af ab       	std	Y+55, r26	; 0x37
    2adc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ae2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a ef       	ldi	r20, 0xFA	; 250
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	89 ab       	std	Y+49, r24	; 0x31
    2af8:	9a ab       	std	Y+50, r25	; 0x32
    2afa:	ab ab       	std	Y+51, r26	; 0x33
    2afc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2afe:	69 a9       	ldd	r22, Y+49	; 0x31
    2b00:	7a a9       	ldd	r23, Y+50	; 0x32
    2b02:	8b a9       	ldd	r24, Y+51	; 0x33
    2b04:	9c a9       	ldd	r25, Y+52	; 0x34
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <Intro_function+0x334>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	98 ab       	std	Y+48, r25	; 0x30
    2b1c:	8f a7       	std	Y+47, r24	; 0x2f
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <Intro_function+0x3b2>
	else if (__tmp > 65535)
    2b20:	69 a9       	ldd	r22, Y+49	; 0x31
    2b22:	7a a9       	ldd	r23, Y+50	; 0x32
    2b24:	8b a9       	ldd	r24, Y+51	; 0x33
    2b26:	9c a9       	ldd	r25, Y+52	; 0x34
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <Intro_function+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	6d a9       	ldd	r22, Y+53	; 0x35
    2b3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	98 ab       	std	Y+48, r25	; 0x30
    2b5e:	8f a7       	std	Y+47, r24	; 0x2f
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <Intro_function+0x394>
    2b62:	88 ec       	ldi	r24, 0xC8	; 200
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9e a7       	std	Y+46, r25	; 0x2e
    2b68:	8d a7       	std	Y+45, r24	; 0x2d
    2b6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <Intro_function+0x382>
    2b72:	9e a7       	std	Y+46, r25	; 0x2e
    2b74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b78:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	98 ab       	std	Y+48, r25	; 0x30
    2b7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b82:	98 a9       	ldd	r25, Y+48	; 0x30
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <Intro_function+0x376>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <Intro_function+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b90:	9c a9       	ldd	r25, Y+52	; 0x34
    2b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	98 ab       	std	Y+48, r25	; 0x30
    2b9c:	8f a7       	std	Y+47, r24	; 0x2f
    2b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba2:	9c a7       	std	Y+44, r25	; 0x2c
    2ba4:	8b a7       	std	Y+43, r24	; 0x2b
    2ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ba8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <Intro_function+0x3be>
    2bae:	9c a7       	std	Y+44, r25	; 0x2c
    2bb0:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(2000);
	 LCD_clearScreen();
    2bb2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
	 LCD_moveCursor(0,0);
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("win a Beans");
    2bbe:	8d ec       	ldi	r24, 0xCD	; 205
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
	 LCD_moveCursor(1,0);
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("or Koshary dish: ");
    2bce:	89 ed       	ldi	r24, 0xD9	; 217
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	aa ef       	ldi	r26, 0xFA	; 250
    2bdc:	b4 e4       	ldi	r27, 0x44	; 68
    2bde:	8f a3       	std	Y+39, r24	; 0x27
    2be0:	98 a7       	std	Y+40, r25	; 0x28
    2be2:	a9 a7       	std	Y+41, r26	; 0x29
    2be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	6f a1       	ldd	r22, Y+39	; 0x27
    2be8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bea:	89 a5       	ldd	r24, Y+41	; 0x29
    2bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4a ef       	ldi	r20, 0xFA	; 250
    2bf4:	54 e4       	ldi	r21, 0x44	; 68
    2bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8b a3       	std	Y+35, r24	; 0x23
    2c00:	9c a3       	std	Y+36, r25	; 0x24
    2c02:	ad a3       	std	Y+37, r26	; 0x25
    2c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c06:	6b a1       	ldd	r22, Y+35	; 0x23
    2c08:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	2c f4       	brge	.+10     	; 0x2c28 <Intro_function+0x43c>
		__ticks = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
    2c26:	3f c0       	rjmp	.+126    	; 0x2ca6 <Intro_function+0x4ba>
	else if (__tmp > 65535)
    2c28:	6b a1       	ldd	r22, Y+35	; 0x23
    2c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	4c f5       	brge	.+82     	; 0x2c92 <Intro_function+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	6f a1       	ldd	r22, Y+39	; 0x27
    2c42:	78 a5       	ldd	r23, Y+40	; 0x28
    2c44:	89 a5       	ldd	r24, Y+41	; 0x29
    2c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e2       	ldi	r20, 0x20	; 32
    2c4e:	51 e4       	ldi	r21, 0x41	; 65
    2c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9a a3       	std	Y+34, r25	; 0x22
    2c66:	89 a3       	std	Y+33, r24	; 0x21
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <Intro_function+0x49c>
    2c6a:	88 ec       	ldi	r24, 0xC8	; 200
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	98 a3       	std	Y+32, r25	; 0x20
    2c70:	8f 8f       	std	Y+31, r24	; 0x1f
    2c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c74:	98 a1       	ldd	r25, Y+32	; 0x20
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <Intro_function+0x48a>
    2c7a:	98 a3       	std	Y+32, r25	; 0x20
    2c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c80:	9a a1       	ldd	r25, Y+34	; 0x22
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <Intro_function+0x47e>
    2c90:	14 c0       	rjmp	.+40     	; 0x2cba <Intro_function+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	6b a1       	ldd	r22, Y+35	; 0x23
    2c94:	7c a1       	ldd	r23, Y+36	; 0x24
    2c96:	8d a1       	ldd	r24, Y+37	; 0x25
    2c98:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9a a3       	std	Y+34, r25	; 0x22
    2ca4:	89 a3       	std	Y+33, r24	; 0x21
    2ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    2caa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cac:	8d 8f       	std	Y+29, r24	; 0x1d
    2cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <Intro_function+0x4c6>
    2cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    2cb8:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2000);
	 LCD_clearScreen();
    2cba:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
	 LCD_moveCursor(0,0);
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("According to  ");
    2cc6:	8b ee       	ldi	r24, 0xEB	; 235
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
	 LCD_moveCursor(1,0);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("The winner , ");
    2cd6:	8a ef       	ldi	r24, 0xFA	; 250
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	aa ef       	ldi	r26, 0xFA	; 250
    2ce4:	b4 e4       	ldi	r27, 0x44	; 68
    2ce6:	89 8f       	std	Y+25, r24	; 0x19
    2ce8:	9a 8f       	std	Y+26, r25	; 0x1a
    2cea:	ab 8f       	std	Y+27, r26	; 0x1b
    2cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a ef       	ldi	r20, 0xFA	; 250
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8d 8b       	std	Y+21, r24	; 0x15
    2d08:	9e 8b       	std	Y+22, r25	; 0x16
    2d0a:	af 8b       	std	Y+23, r26	; 0x17
    2d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d10:	7e 89       	ldd	r23, Y+22	; 0x16
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <Intro_function+0x544>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <Intro_function+0x5c2>
	else if (__tmp > 65535)
    2d30:	6d 89       	ldd	r22, Y+21	; 0x15
    2d32:	7e 89       	ldd	r23, Y+22	; 0x16
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <Intro_function+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	69 8d       	ldd	r22, Y+25	; 0x19
    2d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9c 8b       	std	Y+20, r25	; 0x14
    2d6e:	8b 8b       	std	Y+19, r24	; 0x13
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <Intro_function+0x5a4>
    2d72:	88 ec       	ldi	r24, 0xC8	; 200
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9a 8b       	std	Y+18, r25	; 0x12
    2d78:	89 8b       	std	Y+17, r24	; 0x11
    2d7a:	89 89       	ldd	r24, Y+17	; 0x11
    2d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <Intro_function+0x592>
    2d82:	9a 8b       	std	Y+18, r25	; 0x12
    2d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	8b 89       	ldd	r24, Y+19	; 0x13
    2d88:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9c 8b       	std	Y+20, r25	; 0x14
    2d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	8b 89       	ldd	r24, Y+19	; 0x13
    2d92:	9c 89       	ldd	r25, Y+20	; 0x14
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <Intro_function+0x586>
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <Intro_function+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2da0:	98 8d       	ldd	r25, Y+24	; 0x18
    2da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9c 8b       	std	Y+20, r25	; 0x14
    2dac:	8b 8b       	std	Y+19, r24	; 0x13
    2dae:	8b 89       	ldd	r24, Y+19	; 0x13
    2db0:	9c 89       	ldd	r25, Y+20	; 0x14
    2db2:	98 8b       	std	Y+16, r25	; 0x10
    2db4:	8f 87       	std	Y+15, r24	; 0x0f
    2db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db8:	98 89       	ldd	r25, Y+16	; 0x10
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <Intro_function+0x5ce>
    2dbe:	98 8b       	std	Y+16, r25	; 0x10
    2dc0:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2000);
	 LCD_clearScreen();
    2dc2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
	 LCD_moveCursor(0,0);
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("What does");
    2dce:	88 e0       	ldi	r24, 0x08	; 8
    2dd0:	91 e0       	ldi	r25, 0x01	; 1
    2dd2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
	 LCD_moveCursor(1,0);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_moveCursor>
	 LCD_displayString("He like ? ");
    2dde:	82 e1       	ldi	r24, 0x12	; 18
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	aa ef       	ldi	r26, 0xFA	; 250
    2dec:	b4 e4       	ldi	r27, 0x44	; 68
    2dee:	8b 87       	std	Y+11, r24	; 0x0b
    2df0:	9c 87       	std	Y+12, r25	; 0x0c
    2df2:	ad 87       	std	Y+13, r26	; 0x0d
    2df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	4a ef       	ldi	r20, 0xFA	; 250
    2e04:	54 e4       	ldi	r21, 0x44	; 68
    2e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8f 83       	std	Y+7, r24	; 0x07
    2e10:	98 87       	std	Y+8, r25	; 0x08
    2e12:	a9 87       	std	Y+9, r26	; 0x09
    2e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e16:	6f 81       	ldd	r22, Y+7	; 0x07
    2e18:	78 85       	ldd	r23, Y+8	; 0x08
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	2c f4       	brge	.+10     	; 0x2e38 <Intro_function+0x64c>
		__ticks = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	3f c0       	rjmp	.+126    	; 0x2eb6 <Intro_function+0x6ca>
	else if (__tmp > 65535)
    2e38:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3a:	78 85       	ldd	r23, Y+8	; 0x08
    2e3c:	89 85       	ldd	r24, Y+9	; 0x09
    2e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	3f ef       	ldi	r19, 0xFF	; 255
    2e44:	4f e7       	ldi	r20, 0x7F	; 127
    2e46:	57 e4       	ldi	r21, 0x47	; 71
    2e48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e4c:	18 16       	cp	r1, r24
    2e4e:	4c f5       	brge	.+82     	; 0x2ea2 <Intro_function+0x6b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9e 83       	std	Y+6, r25	; 0x06
    2e76:	8d 83       	std	Y+5, r24	; 0x05
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <Intro_function+0x6ac>
    2e7a:	88 ec       	ldi	r24, 0xC8	; 200
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9c 83       	std	Y+4, r25	; 0x04
    2e80:	8b 83       	std	Y+3, r24	; 0x03
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <Intro_function+0x69a>
    2e8a:	9c 83       	std	Y+4, r25	; 0x04
    2e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <Intro_function+0x68e>
    2ea0:	14 c0       	rjmp	.+40     	; 0x2eca <Intro_function+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea4:	78 85       	ldd	r23, Y+8	; 0x08
    2ea6:	89 85       	ldd	r24, Y+9	; 0x09
    2ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <Intro_function+0x6d6>
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2000);
	 LCD_clearScreen();
    2eca:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_clearScreen>
}
    2ece:	cc 5a       	subi	r28, 0xAC	; 172
    2ed0:	df 4f       	sbci	r29, 0xFF	; 255
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	08 95       	ret

00002ee6 <__udivmodsi4>:
    2ee6:	a1 e2       	ldi	r26, 0x21	; 33
    2ee8:	1a 2e       	mov	r1, r26
    2eea:	aa 1b       	sub	r26, r26
    2eec:	bb 1b       	sub	r27, r27
    2eee:	fd 01       	movw	r30, r26
    2ef0:	0d c0       	rjmp	.+26     	; 0x2f0c <__udivmodsi4_ep>

00002ef2 <__udivmodsi4_loop>:
    2ef2:	aa 1f       	adc	r26, r26
    2ef4:	bb 1f       	adc	r27, r27
    2ef6:	ee 1f       	adc	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	a2 17       	cp	r26, r18
    2efc:	b3 07       	cpc	r27, r19
    2efe:	e4 07       	cpc	r30, r20
    2f00:	f5 07       	cpc	r31, r21
    2f02:	20 f0       	brcs	.+8      	; 0x2f0c <__udivmodsi4_ep>
    2f04:	a2 1b       	sub	r26, r18
    2f06:	b3 0b       	sbc	r27, r19
    2f08:	e4 0b       	sbc	r30, r20
    2f0a:	f5 0b       	sbc	r31, r21

00002f0c <__udivmodsi4_ep>:
    2f0c:	66 1f       	adc	r22, r22
    2f0e:	77 1f       	adc	r23, r23
    2f10:	88 1f       	adc	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	1a 94       	dec	r1
    2f16:	69 f7       	brne	.-38     	; 0x2ef2 <__udivmodsi4_loop>
    2f18:	60 95       	com	r22
    2f1a:	70 95       	com	r23
    2f1c:	80 95       	com	r24
    2f1e:	90 95       	com	r25
    2f20:	9b 01       	movw	r18, r22
    2f22:	ac 01       	movw	r20, r24
    2f24:	bd 01       	movw	r22, r26
    2f26:	cf 01       	movw	r24, r30
    2f28:	08 95       	ret

00002f2a <__prologue_saves__>:
    2f2a:	2f 92       	push	r2
    2f2c:	3f 92       	push	r3
    2f2e:	4f 92       	push	r4
    2f30:	5f 92       	push	r5
    2f32:	6f 92       	push	r6
    2f34:	7f 92       	push	r7
    2f36:	8f 92       	push	r8
    2f38:	9f 92       	push	r9
    2f3a:	af 92       	push	r10
    2f3c:	bf 92       	push	r11
    2f3e:	cf 92       	push	r12
    2f40:	df 92       	push	r13
    2f42:	ef 92       	push	r14
    2f44:	ff 92       	push	r15
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	ca 1b       	sub	r28, r26
    2f54:	db 0b       	sbc	r29, r27
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	09 94       	ijmp

00002f62 <__epilogue_restores__>:
    2f62:	2a 88       	ldd	r2, Y+18	; 0x12
    2f64:	39 88       	ldd	r3, Y+17	; 0x11
    2f66:	48 88       	ldd	r4, Y+16	; 0x10
    2f68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f74:	b9 84       	ldd	r11, Y+9	; 0x09
    2f76:	c8 84       	ldd	r12, Y+8	; 0x08
    2f78:	df 80       	ldd	r13, Y+7	; 0x07
    2f7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f80:	1b 81       	ldd	r17, Y+3	; 0x03
    2f82:	aa 81       	ldd	r26, Y+2	; 0x02
    2f84:	b9 81       	ldd	r27, Y+1	; 0x01
    2f86:	ce 0f       	add	r28, r30
    2f88:	d1 1d       	adc	r29, r1
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	ed 01       	movw	r28, r26
    2f96:	08 95       	ret

00002f98 <_exit>:
    2f98:	f8 94       	cli

00002f9a <__stop_program>:
    2f9a:	ff cf       	rjmp	.-2      	; 0x2f9a <__stop_program>
